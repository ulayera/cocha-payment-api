// For more info, see: http://jshint.com/docs/options/
{
	// Settings
	"esversion": 6,
	"passfail": false, // Stop on first error.
	"maxerr": 500, // Maximum error before stopping.
	// Predefined globals whom JSHint will ignore.
	"browser": false, // Standard browser globals e.g. `window`, `document`.
	"browserify": false,
	"couch": false,
	"dojo": false,
	"jasmine": false,
	"jquery": true,
	"mocha": false,
	"node": true,
	"phantom": false,
	"prototypejs": false,
	"qunit": false,
	"rhino": false,
	"shelljs": false,
	"wsh": false, // Windows Scripting Host.
	"predef": [ // Custom globals.
		"define", "require", "$", "jQuery", "_", "Koa", "google", "ga", "dataLayer", "moment", "angular", "expect", "describe", "test", "it", "jasmine"
	],

	// Development.
	"debug": false, // Allow debugger statements e.g. browser breakpoints.
	"devel": true, // Allow developments statements e.g. `console.log();`.

	//Enforcing options
	"bitwise": false, // Prohibit bitwise operators (&, |, ^, etc.).
	"curly": true, // Require {} for every new block or scope.
	"eqeqeq": true, // Require triple equals i.e. `===`.
	"strict": true, // Require `use strict` pragma  in every file.
	"forin": true, // Tolerate `for in` loops without `hasOwnPrototype`.
	"freeze": true, // Prohibits overwriting prototypes of native objects such as Array, Date and so on.
	"funcscope": false, // Tolerate declaring variables inside of control structures while accessing them later from the outside
	"futurehostile": true, // Enables warnings about the use of identifiers which are defined in future versions of JavaScript
	"latedef": false, // Prohibit variable use before definition.
	"noarg": true, // Prohibit use of `arguments.caller` and `arguments.callee`.
	"nonbsp": false, // Prohibit "non-breaking whitespace" characters
	"nonew": true, // Prohibit the use of constructor functions for side-effects
	"notypeof": false, // Tolerate invalid typeof operator values. This operator has only a limited set of possible return values
	"shadow": false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"strict": true, // Require the code to run in ECMAScript 5's strict mode
	"undef": true, // Require all non-global variables be declared before they are used.
	"unused": true, // Prohibits unused variables declaration.

	// Relaxing options
	"asi": false, // Tolerate Automatic Semicolon Insertion (no semicolons).
	"boss": false, // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"eqnull": true, // Tolerate use of `== null`.
	"evil": false, // Tolerate use of `eval`.
	"expr": true, // Tolerate use of expressions where normally you would expect to see assignments or function calls
	"lastsemic": false, // Allow missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block
	"loopfunc": false, // Allow functions to be defined within loops.
	"plusplus": false, // Prohibit use of `++` & `--`.
	"proto": false, // Tolerate the __proto__ property.
	"scripturl": false, // Tolerate script-targeted URLs.
	"supernew": false, // Tolerate `new function () { ... };` and `new Object;`.
	"regexdash": false // Tolerate unescaped last dash i.e. `[-...]`.
}
